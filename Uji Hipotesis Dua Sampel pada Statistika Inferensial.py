# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RNT3S5UsL09_uc-04XcFcS6rdBNJiRw0
"""

from scipy.stats import norm, t

# Memasukkan nilai rata-rata sampel
mean1 = float(input("Masukkan nilai rata-rata sampel 1: "))
mean2 = float(input("Masukkan nilai rata-rata sampel 2: "))

# Memasukkan jumlah data sampel
n1 = int(input("Masukkan jumlah data sampel 1 (n1): "))
n2 = int(input("Masukkan jumlah data sampel 2 (n2): "))

# Memilih jenis uji (standar deviasi sampel atau populasi)
deviation_type = input("Apakah standar deviasi sampel diketahui? (y/n): ")

# Menginisialisasi standar deviasi
std1 = None
std2 = None

# Memasukkan nilai standar deviasi jika diketahui
if deviation_type.lower() == 'y':
    std1 = float(input("Masukkan standar deviasi sampel 1: "))
    std2 = float(input("Masukkan standar deviasi sampel 2: "))

# Memilih jenis uji (one-tailed atau two-tailed)
test_type = input("Pilih jenis uji (one-tailed atau two-tailed): ")

# Memasukkan tingkat signifikansi (alpha)
alpha = float(input("Masukkan nilai alpha: "))

# Menghitung z-hitung atau t-hitung
if deviation_type.lower() == 'y':
    # Uji t jika standar deviasi sampel diketahui
    numerator = mean1 - mean2
    denominator = ((std1 * 2) / n1 + (std2 * 2) / n2) ** 0.5
    t_score = numerator / denominator
    df = n1 + n2 - 2

    # Menghitung kritis t-value berdasarkan jenis uji dan tingkat signifikansi
    if test_type.lower() == 'one-tailed':
        critical_t = t.ppf(1 - alpha, df)
    else:
        critical_t = t.ppf(1 - alpha / 2, df)

    # Menampilkan hasil
    print("t-hitung:", t_score)
    print("Kritis t-value:", critical_t)

    if t_score > critical_t or t_score < -critical_t:
        print("Menolak hipotesis nol")
    else:
        print("Gagal menolak hipotesis nol")
else:
    # Uji z jika standar deviasi populasi diketahui
    numerator = mean1 - mean2

    # Menghitung z-hitung
    if std1 is not None and std2 is not None:
        denominator = ((std1 * 2) / n1 + (std2 * 2) / n2) ** 0.5
    else:
        denominator = ((mean1 / n1) + (mean2 / n2)) ** 0.5

    z_score = numerator / denominator

    # Menghitung kritis z-value berdasarkan jenis uji dan tingkat signifikansi
    if test_type.lower() == 'one-tailed':
        critical_z = norm.ppf(1 - alpha)
    else:
        critical_z = norm.ppf(1 - alpha / 2)

    # Menampilkan hasil
    print("z-hitung:", z_score)
    print("Kritis z-value:", critical_z)

    if z_score > critical_z or z_score < -critical_z:
        print("Menolak hipotesis nol")
    else:
        print("Gagal menolak hipotesis nol")